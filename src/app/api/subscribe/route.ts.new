// Route handler for form submissions
import { prisma } from "@/lib/prisma";
import { NextRequest, NextResponse } from "next/server";
import { 
  formSubmissionSchema, 
  sanitizeEmail, 
  sanitizeFormData,
  checkRateLimit
} from "@/lib/form-validation";

export async function POST(request: NextRequest) {
  try {
    // Get IP for rate limiting
    const ip = request.headers.get("x-forwarded-for") || "anonymous";
    
    // Apply rate limiting
    if (!checkRateLimit(ip, 5, 60000)) {
      return NextResponse.json(
        { error: "Zbyt wiele żądań. Spróbuj ponownie za kilka minut." },
        { status: 429 }
      );
    }

    // Parse the request body
    const body = await request.json();
    
    // Sanitize the data
    const sanitizedBody = sanitizeFormData(body);
    const { contactEmail, zgodaPrzetwarzanie, zgodaKontakt, ...formData } = sanitizedBody;
    
    // Basic validation
    if (!contactEmail || typeof contactEmail !== "string") {
      return NextResponse.json(
        { error: "Email jest wymagany" },
        { status: 400 }
      );
    }

    if (!zgodaPrzetwarzanie || !zgodaKontakt) {
      return NextResponse.json(
        { error: "Wymagane są obie zgody" },
        { status: 400 }
      );
    }
    
    // Proper email sanitization
    const cleanEmail = sanitizeEmail(contactEmail);
    
    // Validate with Zod schema
    try {
      formSubmissionSchema.parse({
        contactEmail: cleanEmail,
        zgodaPrzetwarzanie,
        zgodaKontakt,
        submissionDate: sanitizedBody.submissionDate || new Date().toISOString()
      });
    } catch (validationError) {
      console.error("Validation error:", validationError);
      return NextResponse.json(
        { error: "Nieprawidłowe dane formularza" },
        { status: 400 }
      );
    }

    // Save the email subscription first
    const subscription = await prisma.emailSubscription.create({
      data: {
        email: cleanEmail,
        acceptedTerms: zgodaPrzetwarzanie === true,
        acceptedContact: zgodaKontakt === true,
        status: "active",
        submittedAt: new Date(),
      },
    });

    // Then save the form submission with reference to the email subscription
    const submission = await prisma.formSubmission.create({
      data: {
        emailSubscriptionId: subscription.id,
        formData: formData,
        status: "pending"
      },
    });

    // Return success response
    return NextResponse.json(
      {
        success: true,
        message: "Formularz zapisany pomyślnie",
        id: submission.id,
      },
      { status: 201 }
    );
  } catch (error) {
    console.error("Error processing form submission:", error);
    return NextResponse.json(
      { error: "Wystąpił błąd podczas przetwarzania formularza. Spróbuj ponownie." },
      { status: 500 }
    );
  }
}
